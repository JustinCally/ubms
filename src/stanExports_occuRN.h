// Generated by rstantools.  Do not edit by hand.

/*
    ubms is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ubms is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ubms.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_occuRN_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_occuRN");
    reader.add_event(33, 33, "include", "/include/data.stan");
    reader.add_event(33, 0, "start", "/include/data.stan");
    reader.add_event(66, 33, "end", "/include/data.stan");
    reader.add_event(66, 34, "restart", "model_occuRN");
    reader.add_event(71, 39, "include", "/include/params_single_season.stan");
    reader.add_event(71, 0, "start", "/include/params_single_season.stan");
    reader.add_event(78, 7, "end", "/include/params_single_season.stan");
    reader.add_event(78, 40, "restart", "model_occuRN");
    reader.add_event(107, 69, "include", "/include/model_single_season.stan");
    reader.add_event(107, 0, "start", "/include/model_single_season.stan");
    reader.add_event(132, 25, "end", "/include/model_single_season.stan");
    reader.add_event(132, 70, "restart", "model_occuRN");
    reader.add_event(136, 72, "end", "model_occuRN");
    return reader;
}
template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
lp_rn(const std::vector<int>& y,
          const T1__& log_lambda,
          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& logit_r,
          const int& J,
          const int& K,
          const int& Kmin, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        int numN(0);
        (void) numN;  // dummy to suppress unused var warning
        stan::math::fill(numN, std::numeric_limits<int>::min());
        stan::math::assign(numN,((K - Kmin) + 1));
        current_statement_begin__ = 6;
        validate_non_negative_index("q", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> q(J);
        stan::math::initialize(q, DUMMY_VAR__);
        stan::math::fill(q, DUMMY_VAR__);
        stan::math::assign(q,subtract(1, inv_logit(logit_r)));
        current_statement_begin__ = 8;
        validate_non_negative_index("lp", "numN", numN);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp(numN);
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);
        current_statement_begin__ = 9;
        validate_non_negative_index("p", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p(J);
        stan::math::initialize(p, DUMMY_VAR__);
        stan::math::fill(p, DUMMY_VAR__);
        current_statement_begin__ = 10;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        current_statement_begin__ = 12;
        for (int i = 1; i <= numN; ++i) {
            current_statement_begin__ = 13;
            stan::math::assign(N, ((K - i) + 1));
            current_statement_begin__ = 14;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 14;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (1 - pow(get_base1(q, j, "q", 1), N)), 
                            "assigning variable p");
            }
            current_statement_begin__ = 15;
            stan::model::assign(lp, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (poisson_log_log(N, log_lambda) + bernoulli_log(y, p)), 
                        "assigning variable lp");
        }
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(lp));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lp_rn_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const std::vector<int>& y,
          const T1__& log_lambda,
          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& logit_r,
          const int& J,
          const int& K,
          const int& Kmin, std::ostream* pstream__) const {
        return lp_rn(y, log_lambda, logit_r, J, K, Kmin, pstream__);
    }
};
template <typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__>::type, Eigen::Dynamic, 1>
get_loglik_rn(const std::vector<int>& y,
                  const int& M,
                  const std::vector<std::vector<int> >& J,
                  const std::vector<std::vector<int> >& si,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& log_lambda,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& logit_p,
                  const int& K,
                  const std::vector<std::vector<int> >& Kmin, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 22;
        validate_non_negative_index("out", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> out(M);
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 23;
        for (int i = 1; i <= M; ++i) {
            current_statement_begin__ = 24;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        lp_rn(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(si, i, "si", 1), 1, "si", 2), get_base1(get_base1(si, i, "si", 1), 2, "si", 2)), stan::model::nil_index_list()), "y"), get_base1(log_lambda, i, "log_lambda", 1), stan::model::rvalue(logit_p, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(si, i, "si", 1), 1, "si", 2), get_base1(get_base1(si, i, "si", 1), 2, "si", 2)), stan::model::nil_index_list()), "logit_p"), get_base1(get_base1(J, i, "J", 1), 1, "J", 2), K, get_base1(get_base1(Kmin, i, "Kmin", 1), 1, "Kmin", 2), pstream__), 
                        "assigning variable out");
        }
        current_statement_begin__ = 27;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_loglik_rn_functor__ {
    template <typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<int>& y,
                  const int& M,
                  const std::vector<std::vector<int> >& J,
                  const std::vector<std::vector<int> >& si,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& log_lambda,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& logit_p,
                  const int& K,
                  const std::vector<std::vector<int> >& Kmin, std::ostream* pstream__) const {
        return get_loglik_rn(y, M, J, si, log_lambda, logit_p, K, Kmin, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_occuRN : public prob_grad {
private:
        int M;
        int T;
        int Tsamp_size;
        std::vector<int> Tsamp;
        int R;
        std::vector<std::vector<int> > J;
        std::vector<int> y;
        std::vector<std::vector<int> > si;
        int K;
        std::vector<std::vector<int> > Kmin;
        int y_dist;
        int z_dist;
        int has_random_state;
        int has_random_det;
        int n_fixed_state;
        int n_fixed_det;
        int n_group_vars_state;
        int n_group_vars_det;
        std::vector<int> n_random_state;
        std::vector<int> n_random_det;
        matrix_d X_state;
        matrix_d X_det;
        std::vector<int> Zdim_state;
        vector_d Zw_state;
        std::vector<int> Zv_state;
        std::vector<int> Zu_state;
        std::vector<int> Zdim_det;
        vector_d Zw_det;
        std::vector<int> Zv_det;
        std::vector<int> Zu_det;
public:
    model_occuRN(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_occuRN(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_occuRN_namespace::model_occuRN";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "Tsamp_size", "int", context__.to_vec());
            Tsamp_size = int(0);
            vals_i__ = context__.vals_i("Tsamp_size");
            pos__ = 0;
            Tsamp_size = vals_i__[pos__++];
            current_statement_begin__ = 38;
            validate_non_negative_index("Tsamp", "Tsamp_size", Tsamp_size);
            context__.validate_dims("data initialization", "Tsamp", "int", context__.to_vec(Tsamp_size));
            Tsamp = std::vector<int>(Tsamp_size, int(0));
            vals_i__ = context__.vals_i("Tsamp");
            pos__ = 0;
            size_t Tsamp_k_0_max__ = Tsamp_size;
            for (size_t k_0__ = 0; k_0__ < Tsamp_k_0_max__; ++k_0__) {
                Tsamp[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "R", "int", context__.to_vec());
            R = int(0);
            vals_i__ = context__.vals_i("R");
            pos__ = 0;
            R = vals_i__[pos__++];
            current_statement_begin__ = 40;
            validate_non_negative_index("J", "M", M);
            validate_non_negative_index("J", "T", T);
            context__.validate_dims("data initialization", "J", "int", context__.to_vec(M,T));
            J = std::vector<std::vector<int> >(M, std::vector<int>(T, int(0)));
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            size_t J_k_0_max__ = M;
            size_t J_k_1_max__ = T;
            for (size_t k_1__ = 0; k_1__ < J_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < J_k_0_max__; ++k_0__) {
                    J[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("y", "R", R);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(R));
            y = std::vector<int>(R, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = R;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("si", "M", M);
            validate_non_negative_index("si", "6", 6);
            context__.validate_dims("data initialization", "si", "int", context__.to_vec(M,6));
            si = std::vector<std::vector<int> >(M, std::vector<int>(6, int(0)));
            vals_i__ = context__.vals_i("si");
            pos__ = 0;
            size_t si_k_0_max__ = M;
            size_t si_k_1_max__ = 6;
            for (size_t k_1__ = 0; k_1__ < si_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < si_k_0_max__; ++k_0__) {
                    si[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 44;
            validate_non_negative_index("Kmin", "M", M);
            validate_non_negative_index("Kmin", "T", T);
            context__.validate_dims("data initialization", "Kmin", "int", context__.to_vec(M,T));
            Kmin = std::vector<std::vector<int> >(M, std::vector<int>(T, int(0)));
            vals_i__ = context__.vals_i("Kmin");
            pos__ = 0;
            size_t Kmin_k_0_max__ = M;
            size_t Kmin_k_1_max__ = T;
            for (size_t k_1__ = 0; k_1__ < Kmin_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < Kmin_k_0_max__; ++k_0__) {
                    Kmin[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "y_dist", "int", context__.to_vec());
            y_dist = int(0);
            vals_i__ = context__.vals_i("y_dist");
            pos__ = 0;
            y_dist = vals_i__[pos__++];
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "z_dist", "int", context__.to_vec());
            z_dist = int(0);
            vals_i__ = context__.vals_i("z_dist");
            pos__ = 0;
            z_dist = vals_i__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "has_random_state", "int", context__.to_vec());
            has_random_state = int(0);
            vals_i__ = context__.vals_i("has_random_state");
            pos__ = 0;
            has_random_state = vals_i__[pos__++];
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "has_random_det", "int", context__.to_vec());
            has_random_det = int(0);
            vals_i__ = context__.vals_i("has_random_det");
            pos__ = 0;
            has_random_det = vals_i__[pos__++];
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "n_fixed_state", "int", context__.to_vec());
            n_fixed_state = int(0);
            vals_i__ = context__.vals_i("n_fixed_state");
            pos__ = 0;
            n_fixed_state = vals_i__[pos__++];
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "n_fixed_det", "int", context__.to_vec());
            n_fixed_det = int(0);
            vals_i__ = context__.vals_i("n_fixed_det");
            pos__ = 0;
            n_fixed_det = vals_i__[pos__++];
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "n_group_vars_state", "int", context__.to_vec());
            n_group_vars_state = int(0);
            vals_i__ = context__.vals_i("n_group_vars_state");
            pos__ = 0;
            n_group_vars_state = vals_i__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "n_group_vars_det", "int", context__.to_vec());
            n_group_vars_det = int(0);
            vals_i__ = context__.vals_i("n_group_vars_det");
            pos__ = 0;
            n_group_vars_det = vals_i__[pos__++];
            current_statement_begin__ = 53;
            validate_non_negative_index("n_random_state", "(has_random_state ? n_group_vars_state : 1 )", (has_random_state ? n_group_vars_state : 1 ));
            context__.validate_dims("data initialization", "n_random_state", "int", context__.to_vec((has_random_state ? n_group_vars_state : 1 )));
            n_random_state = std::vector<int>((has_random_state ? n_group_vars_state : 1 ), int(0));
            vals_i__ = context__.vals_i("n_random_state");
            pos__ = 0;
            size_t n_random_state_k_0_max__ = (has_random_state ? n_group_vars_state : 1 );
            for (size_t k_0__ = 0; k_0__ < n_random_state_k_0_max__; ++k_0__) {
                n_random_state[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 54;
            validate_non_negative_index("n_random_det", "(has_random_det ? n_group_vars_det : 1 )", (has_random_det ? n_group_vars_det : 1 ));
            context__.validate_dims("data initialization", "n_random_det", "int", context__.to_vec((has_random_det ? n_group_vars_det : 1 )));
            n_random_det = std::vector<int>((has_random_det ? n_group_vars_det : 1 ), int(0));
            vals_i__ = context__.vals_i("n_random_det");
            pos__ = 0;
            size_t n_random_det_k_0_max__ = (has_random_det ? n_group_vars_det : 1 );
            for (size_t k_0__ = 0; k_0__ < n_random_det_k_0_max__; ++k_0__) {
                n_random_det[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("X_state", "M", M);
            validate_non_negative_index("X_state", "n_fixed_state", n_fixed_state);
            context__.validate_dims("data initialization", "X_state", "matrix_d", context__.to_vec(M,n_fixed_state));
            X_state = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, n_fixed_state);
            vals_r__ = context__.vals_r("X_state");
            pos__ = 0;
            size_t X_state_j_2_max__ = n_fixed_state;
            size_t X_state_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_state_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_state_j_1_max__; ++j_1__) {
                    X_state(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("X_det", "R", R);
            validate_non_negative_index("X_det", "n_fixed_det", n_fixed_det);
            context__.validate_dims("data initialization", "X_det", "matrix_d", context__.to_vec(R,n_fixed_det));
            X_det = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(R, n_fixed_det);
            vals_r__ = context__.vals_r("X_det");
            pos__ = 0;
            size_t X_det_j_2_max__ = n_fixed_det;
            size_t X_det_j_1_max__ = R;
            for (size_t j_2__ = 0; j_2__ < X_det_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_det_j_1_max__; ++j_1__) {
                    X_det(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 58;
            validate_non_negative_index("Zdim_state", "5", 5);
            context__.validate_dims("data initialization", "Zdim_state", "int", context__.to_vec(5));
            Zdim_state = std::vector<int>(5, int(0));
            vals_i__ = context__.vals_i("Zdim_state");
            pos__ = 0;
            size_t Zdim_state_k_0_max__ = 5;
            for (size_t k_0__ = 0; k_0__ < Zdim_state_k_0_max__; ++k_0__) {
                Zdim_state[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 59;
            validate_non_negative_index("Zw_state", "get_base1(Zdim_state, 3, \"Zdim_state\", 1)", get_base1(Zdim_state, 3, "Zdim_state", 1));
            context__.validate_dims("data initialization", "Zw_state", "vector_d", context__.to_vec(get_base1(Zdim_state, 3, "Zdim_state", 1)));
            Zw_state = Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(Zdim_state, 3, "Zdim_state", 1));
            vals_r__ = context__.vals_r("Zw_state");
            pos__ = 0;
            size_t Zw_state_j_1_max__ = get_base1(Zdim_state, 3, "Zdim_state", 1);
            for (size_t j_1__ = 0; j_1__ < Zw_state_j_1_max__; ++j_1__) {
                Zw_state(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 60;
            validate_non_negative_index("Zv_state", "get_base1(Zdim_state, 4, \"Zdim_state\", 1)", get_base1(Zdim_state, 4, "Zdim_state", 1));
            context__.validate_dims("data initialization", "Zv_state", "int", context__.to_vec(get_base1(Zdim_state, 4, "Zdim_state", 1)));
            Zv_state = std::vector<int>(get_base1(Zdim_state, 4, "Zdim_state", 1), int(0));
            vals_i__ = context__.vals_i("Zv_state");
            pos__ = 0;
            size_t Zv_state_k_0_max__ = get_base1(Zdim_state, 4, "Zdim_state", 1);
            for (size_t k_0__ = 0; k_0__ < Zv_state_k_0_max__; ++k_0__) {
                Zv_state[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 61;
            validate_non_negative_index("Zu_state", "get_base1(Zdim_state, 5, \"Zdim_state\", 1)", get_base1(Zdim_state, 5, "Zdim_state", 1));
            context__.validate_dims("data initialization", "Zu_state", "int", context__.to_vec(get_base1(Zdim_state, 5, "Zdim_state", 1)));
            Zu_state = std::vector<int>(get_base1(Zdim_state, 5, "Zdim_state", 1), int(0));
            vals_i__ = context__.vals_i("Zu_state");
            pos__ = 0;
            size_t Zu_state_k_0_max__ = get_base1(Zdim_state, 5, "Zdim_state", 1);
            for (size_t k_0__ = 0; k_0__ < Zu_state_k_0_max__; ++k_0__) {
                Zu_state[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 63;
            validate_non_negative_index("Zdim_det", "5", 5);
            context__.validate_dims("data initialization", "Zdim_det", "int", context__.to_vec(5));
            Zdim_det = std::vector<int>(5, int(0));
            vals_i__ = context__.vals_i("Zdim_det");
            pos__ = 0;
            size_t Zdim_det_k_0_max__ = 5;
            for (size_t k_0__ = 0; k_0__ < Zdim_det_k_0_max__; ++k_0__) {
                Zdim_det[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 64;
            validate_non_negative_index("Zw_det", "get_base1(Zdim_det, 3, \"Zdim_det\", 1)", get_base1(Zdim_det, 3, "Zdim_det", 1));
            context__.validate_dims("data initialization", "Zw_det", "vector_d", context__.to_vec(get_base1(Zdim_det, 3, "Zdim_det", 1)));
            Zw_det = Eigen::Matrix<double, Eigen::Dynamic, 1>(get_base1(Zdim_det, 3, "Zdim_det", 1));
            vals_r__ = context__.vals_r("Zw_det");
            pos__ = 0;
            size_t Zw_det_j_1_max__ = get_base1(Zdim_det, 3, "Zdim_det", 1);
            for (size_t j_1__ = 0; j_1__ < Zw_det_j_1_max__; ++j_1__) {
                Zw_det(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 65;
            validate_non_negative_index("Zv_det", "get_base1(Zdim_det, 4, \"Zdim_det\", 1)", get_base1(Zdim_det, 4, "Zdim_det", 1));
            context__.validate_dims("data initialization", "Zv_det", "int", context__.to_vec(get_base1(Zdim_det, 4, "Zdim_det", 1)));
            Zv_det = std::vector<int>(get_base1(Zdim_det, 4, "Zdim_det", 1), int(0));
            vals_i__ = context__.vals_i("Zv_det");
            pos__ = 0;
            size_t Zv_det_k_0_max__ = get_base1(Zdim_det, 4, "Zdim_det", 1);
            for (size_t k_0__ = 0; k_0__ < Zv_det_k_0_max__; ++k_0__) {
                Zv_det[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("Zu_det", "get_base1(Zdim_det, 5, \"Zdim_det\", 1)", get_base1(Zdim_det, 5, "Zdim_det", 1));
            context__.validate_dims("data initialization", "Zu_det", "int", context__.to_vec(get_base1(Zdim_det, 5, "Zdim_det", 1)));
            Zu_det = std::vector<int>(get_base1(Zdim_det, 5, "Zdim_det", 1), int(0));
            vals_i__ = context__.vals_i("Zu_det");
            pos__ = 0;
            size_t Zu_det_k_0_max__ = get_base1(Zdim_det, 5, "Zdim_det", 1);
            for (size_t k_0__ = 0; k_0__ < Zu_det_k_0_max__; ++k_0__) {
                Zu_det[k_0__] = vals_i__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 73;
            validate_non_negative_index("beta_state", "n_fixed_state", n_fixed_state);
            num_params_r__ += n_fixed_state;
            current_statement_begin__ = 74;
            validate_non_negative_index("beta_det", "n_fixed_det", n_fixed_det);
            num_params_r__ += n_fixed_det;
            current_statement_begin__ = 75;
            validate_non_negative_index("sigma_state", "n_group_vars_state", n_group_vars_state);
            num_params_r__ += n_group_vars_state;
            current_statement_begin__ = 76;
            validate_non_negative_index("sigma_det", "n_group_vars_det", n_group_vars_det);
            num_params_r__ += n_group_vars_det;
            current_statement_begin__ = 77;
            validate_non_negative_index("b_state", "sum(n_random_state)", sum(n_random_state));
            num_params_r__ += sum(n_random_state);
            current_statement_begin__ = 78;
            validate_non_negative_index("b_det", "sum(n_random_det)", sum(n_random_det));
            num_params_r__ += sum(n_random_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_occuRN() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 73;
        if (!(context__.contains_r("beta_state")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_state missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_state");
        pos__ = 0U;
        validate_non_negative_index("beta_state", "n_fixed_state", n_fixed_state);
        context__.validate_dims("parameter initialization", "beta_state", "vector_d", context__.to_vec(n_fixed_state));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_state(n_fixed_state);
        size_t beta_state_j_1_max__ = n_fixed_state;
        for (size_t j_1__ = 0; j_1__ < beta_state_j_1_max__; ++j_1__) {
            beta_state(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_state);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_state: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 74;
        if (!(context__.contains_r("beta_det")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_det missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_det");
        pos__ = 0U;
        validate_non_negative_index("beta_det", "n_fixed_det", n_fixed_det);
        context__.validate_dims("parameter initialization", "beta_det", "vector_d", context__.to_vec(n_fixed_det));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_det(n_fixed_det);
        size_t beta_det_j_1_max__ = n_fixed_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            beta_det(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_det: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 75;
        if (!(context__.contains_r("sigma_state")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_state missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_state");
        pos__ = 0U;
        validate_non_negative_index("sigma_state", "n_group_vars_state", n_group_vars_state);
        context__.validate_dims("parameter initialization", "sigma_state", "vector_d", context__.to_vec(n_group_vars_state));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_state(n_group_vars_state);
        size_t sigma_state_j_1_max__ = n_group_vars_state;
        for (size_t j_1__ = 0; j_1__ < sigma_state_j_1_max__; ++j_1__) {
            sigma_state(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_state);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_state: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 76;
        if (!(context__.contains_r("sigma_det")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_det missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_det");
        pos__ = 0U;
        validate_non_negative_index("sigma_det", "n_group_vars_det", n_group_vars_det);
        context__.validate_dims("parameter initialization", "sigma_det", "vector_d", context__.to_vec(n_group_vars_det));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_det(n_group_vars_det);
        size_t sigma_det_j_1_max__ = n_group_vars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            sigma_det(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_det: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("b_state")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_state missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_state");
        pos__ = 0U;
        validate_non_negative_index("b_state", "sum(n_random_state)", sum(n_random_state));
        context__.validate_dims("parameter initialization", "b_state", "vector_d", context__.to_vec(sum(n_random_state)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_state(sum(n_random_state));
        size_t b_state_j_1_max__ = sum(n_random_state);
        for (size_t j_1__ = 0; j_1__ < b_state_j_1_max__; ++j_1__) {
            b_state(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_state);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_state: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 78;
        if (!(context__.contains_r("b_det")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_det missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_det");
        pos__ = 0U;
        validate_non_negative_index("b_det", "sum(n_random_det)", sum(n_random_det));
        context__.validate_dims("parameter initialization", "b_det", "vector_d", context__.to_vec(sum(n_random_det)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_det(sum(n_random_det));
        size_t b_det_j_1_max__ = sum(n_random_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            b_det(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_det: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 73;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_state;
            (void) beta_state;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_state = in__.vector_constrain(n_fixed_state, lp__);
            else
                beta_state = in__.vector_constrain(n_fixed_state);
            current_statement_begin__ = 74;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_det;
            (void) beta_det;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_det = in__.vector_constrain(n_fixed_det, lp__);
            else
                beta_det = in__.vector_constrain(n_fixed_det);
            current_statement_begin__ = 75;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_state;
            (void) sigma_state;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_state = in__.vector_lb_constrain(0, n_group_vars_state, lp__);
            else
                sigma_state = in__.vector_lb_constrain(0, n_group_vars_state);
            current_statement_begin__ = 76;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_det;
            (void) sigma_det;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_det = in__.vector_lb_constrain(0, n_group_vars_det, lp__);
            else
                sigma_det = in__.vector_lb_constrain(0, n_group_vars_det);
            current_statement_begin__ = 77;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_state;
            (void) b_state;  // dummy to suppress unused var warning
            if (jacobian__)
                b_state = in__.vector_constrain(sum(n_random_state), lp__);
            else
                b_state = in__.vector_constrain(sum(n_random_state));
            current_statement_begin__ = 78;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_det;
            (void) b_det;  // dummy to suppress unused var warning
            if (jacobian__)
                b_det = in__.vector_constrain(sum(n_random_det), lp__);
            else
                b_det = in__.vector_constrain(sum(n_random_det));
            // transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("log_lambda", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lambda(M);
            stan::math::initialize(log_lambda, DUMMY_VAR__);
            stan::math::fill(log_lambda, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("logit_p", "R", R);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_p(R);
            stan::math::initialize(logit_p, DUMMY_VAR__);
            stan::math::fill(logit_p, DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("log_lik", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lik(M);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 88;
            stan::math::assign(log_lambda, multiply(X_state, beta_state));
            current_statement_begin__ = 89;
            stan::math::assign(logit_p, multiply(X_det, beta_det));
            current_statement_begin__ = 91;
            if (as_bool(has_random_state)) {
                current_statement_begin__ = 92;
                stan::math::assign(log_lambda, add(log_lambda, csr_matrix_times_vector(get_base1(Zdim_state, 1, "Zdim_state", 1), get_base1(Zdim_state, 2, "Zdim_state", 1), Zw_state, Zv_state, Zu_state, b_state)));
            }
            current_statement_begin__ = 96;
            if (as_bool(has_random_det)) {
                current_statement_begin__ = 97;
                stan::math::assign(logit_p, add(logit_p, csr_matrix_times_vector(get_base1(Zdim_det, 1, "Zdim_det", 1), get_base1(Zdim_det, 2, "Zdim_det", 1), Zw_det, Zv_det, Zu_det, b_det)));
            }
            current_statement_begin__ = 102;
            stan::math::assign(log_lik, get_loglik_rn(y, M, J, si, log_lambda, logit_p, K, Kmin, pstream__));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 84;
            size_t log_lambda_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_lambda(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_lambda" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_lambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 85;
            size_t logit_p_j_1_max__ = R;
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_p(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_p" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 86;
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_lik(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_lik" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_lik: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 110;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,1);
            current_statement_begin__ = 112;
            lp_accum__.add(normal_log<propto__>(beta_state, 0, 2.5));
            current_statement_begin__ = 113;
            lp_accum__.add(normal_log<propto__>(beta_det, 0, 2.5));
            current_statement_begin__ = 117;
            if (as_bool(has_random_state)) {
                current_statement_begin__ = 118;
                for (int i = 1; i <= n_group_vars_state; ++i) {
                    current_statement_begin__ = 119;
                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(b_state, stan::model::cons_list(stan::model::index_min_max(idx, ((get_base1(n_random_state, i, "n_random_state", 1) + idx) - 1)), stan::model::nil_index_list()), "b_state"), 0, get_base1(sigma_state, i, "sigma_state", 1)));
                    current_statement_begin__ = 120;
                    stan::math::assign(idx, (idx + get_base1(n_random_state, i, "n_random_state", 1)));
                }
            }
            current_statement_begin__ = 124;
            stan::math::assign(idx, 1);
            current_statement_begin__ = 125;
            if (as_bool(has_random_det)) {
                current_statement_begin__ = 126;
                for (int i = 1; i <= n_group_vars_det; ++i) {
                    current_statement_begin__ = 127;
                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(b_det, stan::model::cons_list(stan::model::index_min_max(idx, ((get_base1(n_random_det, i, "n_random_det", 1) + idx) - 1)), stan::model::nil_index_list()), "b_det"), 0, get_base1(sigma_det, i, "sigma_det", 1)));
                    current_statement_begin__ = 128;
                    stan::math::assign(idx, (idx + get_base1(n_random_det, i, "n_random_det", 1)));
                }
            }
            current_statement_begin__ = 132;
            lp_accum__.add(sum(log_lik));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_state");
        names__.push_back("beta_det");
        names__.push_back("sigma_state");
        names__.push_back("sigma_det");
        names__.push_back("b_state");
        names__.push_back("b_det");
        names__.push_back("log_lambda");
        names__.push_back("logit_p");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_fixed_state);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_fixed_det);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_group_vars_state);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_group_vars_det);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(n_random_state));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(n_random_det));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(R);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_occuRN_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_state = in__.vector_constrain(n_fixed_state);
        size_t beta_state_j_1_max__ = n_fixed_state;
        for (size_t j_1__ = 0; j_1__ < beta_state_j_1_max__; ++j_1__) {
            vars__.push_back(beta_state(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_det = in__.vector_constrain(n_fixed_det);
        size_t beta_det_j_1_max__ = n_fixed_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            vars__.push_back(beta_det(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_state = in__.vector_lb_constrain(0, n_group_vars_state);
        size_t sigma_state_j_1_max__ = n_group_vars_state;
        for (size_t j_1__ = 0; j_1__ < sigma_state_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_state(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_det = in__.vector_lb_constrain(0, n_group_vars_det);
        size_t sigma_det_j_1_max__ = n_group_vars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_det(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_state = in__.vector_constrain(sum(n_random_state));
        size_t b_state_j_1_max__ = sum(n_random_state);
        for (size_t j_1__ = 0; j_1__ < b_state_j_1_max__; ++j_1__) {
            vars__.push_back(b_state(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_det = in__.vector_constrain(sum(n_random_det));
        size_t b_det_j_1_max__ = sum(n_random_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            vars__.push_back(b_det(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("log_lambda", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lambda(M);
            stan::math::initialize(log_lambda, DUMMY_VAR__);
            stan::math::fill(log_lambda, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("logit_p", "R", R);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_p(R);
            stan::math::initialize(logit_p, DUMMY_VAR__);
            stan::math::fill(logit_p, DUMMY_VAR__);
            current_statement_begin__ = 86;
            validate_non_negative_index("log_lik", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(M);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 88;
            stan::math::assign(log_lambda, multiply(X_state, beta_state));
            current_statement_begin__ = 89;
            stan::math::assign(logit_p, multiply(X_det, beta_det));
            current_statement_begin__ = 91;
            if (as_bool(has_random_state)) {
                current_statement_begin__ = 92;
                stan::math::assign(log_lambda, add(log_lambda, csr_matrix_times_vector(get_base1(Zdim_state, 1, "Zdim_state", 1), get_base1(Zdim_state, 2, "Zdim_state", 1), Zw_state, Zv_state, Zu_state, b_state)));
            }
            current_statement_begin__ = 96;
            if (as_bool(has_random_det)) {
                current_statement_begin__ = 97;
                stan::math::assign(logit_p, add(logit_p, csr_matrix_times_vector(get_base1(Zdim_det, 1, "Zdim_det", 1), get_base1(Zdim_det, 2, "Zdim_det", 1), Zw_det, Zv_det, Zu_det, b_det)));
            }
            current_statement_begin__ = 102;
            stan::math::assign(log_lik, get_loglik_rn(y, M, J, si, log_lambda, logit_p, K, Kmin, pstream__));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t log_lambda_j_1_max__ = M;
                for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lambda(j_1__));
                }
                size_t logit_p_j_1_max__ = R;
                for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_p(j_1__));
                }
                size_t log_lik_j_1_max__ = M;
                for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lik(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_occuRN";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_state_j_1_max__ = n_fixed_state;
        for (size_t j_1__ = 0; j_1__ < beta_state_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_state" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_det_j_1_max__ = n_fixed_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_state_j_1_max__ = n_group_vars_state;
        for (size_t j_1__ = 0; j_1__ < sigma_state_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_state" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_det_j_1_max__ = n_group_vars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_state_j_1_max__ = sum(n_random_state);
        for (size_t j_1__ = 0; j_1__ < b_state_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_state" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_det_j_1_max__ = sum(n_random_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_lambda_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_j_1_max__ = R;
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_state_j_1_max__ = n_fixed_state;
        for (size_t j_1__ = 0; j_1__ < beta_state_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_state" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_det_j_1_max__ = n_fixed_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_state_j_1_max__ = n_group_vars_state;
        for (size_t j_1__ = 0; j_1__ < sigma_state_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_state" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_det_j_1_max__ = n_group_vars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_state_j_1_max__ = sum(n_random_state);
        for (size_t j_1__ = 0; j_1__ < b_state_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_state" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_det_j_1_max__ = sum(n_random_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_lambda_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lambda" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_j_1_max__ = R;
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_occuRN_namespace::model_occuRN stan_model;
#endif
