// Generated by rstantools.  Do not edit by hand.

/*
    ubms is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ubms is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ubms.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_occupancy_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_occupancy");
    reader.add_event(104, 102, "end", "model_occupancy");
    return reader;
}
template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
lp_occu(const std::vector<int>& y,
            const T1__& logit_psi,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& logit_p,
            const int& nd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ out(DUMMY_VAR__);
        (void) out;  // dummy to suppress unused var warning
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 5;
        stan::math::assign(out, (log_inv_logit(logit_psi) + bernoulli_logit_log(y, logit_p)));
        current_statement_begin__ = 6;
        if (as_bool(logical_eq(nd, 0))) {
            current_statement_begin__ = 7;
            return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_sum_exp(out, log1m_inv_logit(logit_psi)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lp_occu_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const std::vector<int>& y,
            const T1__& logit_psi,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& logit_p,
            const int& nd, std::ostream* pstream__) const {
        return lp_occu(y, logit_psi, logit_p, nd, pstream__);
    }
};
template <typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T3__, T4__>::type, Eigen::Dynamic, 1>
get_loglik(const std::vector<std::vector<int> >& y,
               const int& M,
               const int& J,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& logit_psi,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& logit_p,
               const std::vector<int>& nd, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 13;
        validate_non_negative_index("out", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> out(M);
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 14;
        int idx(0);
        (void) idx;  // dummy to suppress unused var warning
        stan::math::fill(idx, std::numeric_limits<int>::min());
        stan::math::assign(idx,1);
        current_statement_begin__ = 15;
        for (int i = 1; i <= M; ++i) {
            current_statement_begin__ = 16;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        lp_occu(get_base1(y, i, "y", 1), get_base1(logit_psi, i, "logit_psi", 1), stan::model::rvalue(logit_p, stan::model::cons_list(stan::model::index_min_max(idx, ((idx + J) - 1)), stan::model::nil_index_list()), "logit_p"), get_base1(nd, i, "nd", 1), pstream__), 
                        "assigning variable out");
            current_statement_begin__ = 18;
            stan::math::assign(idx, (idx + J));
        }
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct get_loglik_functor__ {
    template <typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<std::vector<int> >& y,
               const int& M,
               const int& J,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& logit_psi,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& logit_p,
               const std::vector<int>& nd, std::ostream* pstream__) const {
        return get_loglik(y, M, J, logit_psi, logit_p, nd, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_occupancy : public prob_grad {
private:
        int M;
        int J;
        std::vector<std::vector<int> > y;
        std::vector<int> no_detects;
        int occ_has_random;
        int det_has_random;
        int nFP_occ;
        int nFP_det;
        int n_grpvars_occ;
        int n_grpvars_det;
        std::vector<int> nRE_occ;
        std::vector<int> nRE_det;
        matrix_d X_occ;
        matrix_d X_det;
        matrix_d Z_occ;
        matrix_d Z_det;
public:
    model_occupancy(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_occupancy(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_occupancy_namespace::model_occupancy";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 29;
            validate_non_negative_index("y", "M", M);
            validate_non_negative_index("y", "J", J);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(M,J));
            y = std::vector<std::vector<int> >(M, std::vector<int>(J, int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = M;
            size_t y_k_1_max__ = J;
            for (size_t k_1__ = 0; k_1__ < y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("no_detects", "M", M);
            context__.validate_dims("data initialization", "no_detects", "int", context__.to_vec(M));
            no_detects = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("no_detects");
            pos__ = 0;
            size_t no_detects_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < no_detects_k_0_max__; ++k_0__) {
                no_detects[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "occ_has_random", "int", context__.to_vec());
            occ_has_random = int(0);
            vals_i__ = context__.vals_i("occ_has_random");
            pos__ = 0;
            occ_has_random = vals_i__[pos__++];
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "det_has_random", "int", context__.to_vec());
            det_has_random = int(0);
            vals_i__ = context__.vals_i("det_has_random");
            pos__ = 0;
            det_has_random = vals_i__[pos__++];
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "nFP_occ", "int", context__.to_vec());
            nFP_occ = int(0);
            vals_i__ = context__.vals_i("nFP_occ");
            pos__ = 0;
            nFP_occ = vals_i__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "nFP_det", "int", context__.to_vec());
            nFP_det = int(0);
            vals_i__ = context__.vals_i("nFP_det");
            pos__ = 0;
            nFP_det = vals_i__[pos__++];
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "n_grpvars_occ", "int", context__.to_vec());
            n_grpvars_occ = int(0);
            vals_i__ = context__.vals_i("n_grpvars_occ");
            pos__ = 0;
            n_grpvars_occ = vals_i__[pos__++];
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "n_grpvars_det", "int", context__.to_vec());
            n_grpvars_det = int(0);
            vals_i__ = context__.vals_i("n_grpvars_det");
            pos__ = 0;
            n_grpvars_det = vals_i__[pos__++];
            current_statement_begin__ = 37;
            validate_non_negative_index("nRE_occ", "(occ_has_random ? n_grpvars_occ : 1 )", (occ_has_random ? n_grpvars_occ : 1 ));
            context__.validate_dims("data initialization", "nRE_occ", "int", context__.to_vec((occ_has_random ? n_grpvars_occ : 1 )));
            nRE_occ = std::vector<int>((occ_has_random ? n_grpvars_occ : 1 ), int(0));
            vals_i__ = context__.vals_i("nRE_occ");
            pos__ = 0;
            size_t nRE_occ_k_0_max__ = (occ_has_random ? n_grpvars_occ : 1 );
            for (size_t k_0__ = 0; k_0__ < nRE_occ_k_0_max__; ++k_0__) {
                nRE_occ[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 38;
            validate_non_negative_index("nRE_det", "(det_has_random ? n_grpvars_det : 1 )", (det_has_random ? n_grpvars_det : 1 ));
            context__.validate_dims("data initialization", "nRE_det", "int", context__.to_vec((det_has_random ? n_grpvars_det : 1 )));
            nRE_det = std::vector<int>((det_has_random ? n_grpvars_det : 1 ), int(0));
            vals_i__ = context__.vals_i("nRE_det");
            pos__ = 0;
            size_t nRE_det_k_0_max__ = (det_has_random ? n_grpvars_det : 1 );
            for (size_t k_0__ = 0; k_0__ < nRE_det_k_0_max__; ++k_0__) {
                nRE_det[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 39;
            validate_non_negative_index("X_occ", "M", M);
            validate_non_negative_index("X_occ", "nFP_occ", nFP_occ);
            context__.validate_dims("data initialization", "X_occ", "matrix_d", context__.to_vec(M,nFP_occ));
            X_occ = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, nFP_occ);
            vals_r__ = context__.vals_r("X_occ");
            pos__ = 0;
            size_t X_occ_j_2_max__ = nFP_occ;
            size_t X_occ_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_occ_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_occ_j_1_max__; ++j_1__) {
                    X_occ(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 40;
            validate_non_negative_index("X_det", "(M * J)", (M * J));
            validate_non_negative_index("X_det", "nFP_det", nFP_det);
            context__.validate_dims("data initialization", "X_det", "matrix_d", context__.to_vec((M * J),nFP_det));
            X_det = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((M * J), nFP_det);
            vals_r__ = context__.vals_r("X_det");
            pos__ = 0;
            size_t X_det_j_2_max__ = nFP_det;
            size_t X_det_j_1_max__ = (M * J);
            for (size_t j_2__ = 0; j_2__ < X_det_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_det_j_1_max__; ++j_1__) {
                    X_det(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("Z_occ", "(occ_has_random ? M : 0 )", (occ_has_random ? M : 0 ));
            validate_non_negative_index("Z_occ", "sum(nRE_occ)", sum(nRE_occ));
            context__.validate_dims("data initialization", "Z_occ", "matrix_d", context__.to_vec((occ_has_random ? M : 0 ),sum(nRE_occ)));
            Z_occ = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((occ_has_random ? M : 0 ), sum(nRE_occ));
            vals_r__ = context__.vals_r("Z_occ");
            pos__ = 0;
            size_t Z_occ_j_2_max__ = sum(nRE_occ);
            size_t Z_occ_j_1_max__ = (occ_has_random ? M : 0 );
            for (size_t j_2__ = 0; j_2__ < Z_occ_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_occ_j_1_max__; ++j_1__) {
                    Z_occ(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("Z_det", "(det_has_random ? (M * J) : 0 )", (det_has_random ? (M * J) : 0 ));
            validate_non_negative_index("Z_det", "sum(nRE_det)", sum(nRE_det));
            context__.validate_dims("data initialization", "Z_det", "matrix_d", context__.to_vec((det_has_random ? (M * J) : 0 ),sum(nRE_det)));
            Z_det = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((det_has_random ? (M * J) : 0 ), sum(nRE_det));
            vals_r__ = context__.vals_r("Z_det");
            pos__ = 0;
            size_t Z_det_j_2_max__ = sum(nRE_det);
            size_t Z_det_j_1_max__ = (det_has_random ? (M * J) : 0 );
            for (size_t j_2__ = 0; j_2__ < Z_det_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_det_j_1_max__; ++j_1__) {
                    Z_det(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 48;
            validate_non_negative_index("beta_occ", "nFP_occ", nFP_occ);
            num_params_r__ += nFP_occ;
            current_statement_begin__ = 49;
            validate_non_negative_index("beta_det", "nFP_det", nFP_det);
            num_params_r__ += nFP_det;
            current_statement_begin__ = 50;
            validate_non_negative_index("sigma_occ", "n_grpvars_occ", n_grpvars_occ);
            num_params_r__ += n_grpvars_occ;
            current_statement_begin__ = 51;
            validate_non_negative_index("sigma_det", "n_grpvars_det", n_grpvars_det);
            num_params_r__ += n_grpvars_det;
            current_statement_begin__ = 52;
            validate_non_negative_index("b_occ", "sum(nRE_occ)", sum(nRE_occ));
            num_params_r__ += sum(nRE_occ);
            current_statement_begin__ = 53;
            validate_non_negative_index("b_det", "sum(nRE_det)", sum(nRE_det));
            num_params_r__ += sum(nRE_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_occupancy() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 48;
        if (!(context__.contains_r("beta_occ")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_occ missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_occ");
        pos__ = 0U;
        validate_non_negative_index("beta_occ", "nFP_occ", nFP_occ);
        context__.validate_dims("parameter initialization", "beta_occ", "vector_d", context__.to_vec(nFP_occ));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_occ(nFP_occ);
        size_t beta_occ_j_1_max__ = nFP_occ;
        for (size_t j_1__ = 0; j_1__ < beta_occ_j_1_max__; ++j_1__) {
            beta_occ(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_occ);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_occ: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("beta_det")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_det missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_det");
        pos__ = 0U;
        validate_non_negative_index("beta_det", "nFP_det", nFP_det);
        context__.validate_dims("parameter initialization", "beta_det", "vector_d", context__.to_vec(nFP_det));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_det(nFP_det);
        size_t beta_det_j_1_max__ = nFP_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            beta_det(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_det: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("sigma_occ")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_occ missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_occ");
        pos__ = 0U;
        validate_non_negative_index("sigma_occ", "n_grpvars_occ", n_grpvars_occ);
        context__.validate_dims("parameter initialization", "sigma_occ", "vector_d", context__.to_vec(n_grpvars_occ));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_occ(n_grpvars_occ);
        size_t sigma_occ_j_1_max__ = n_grpvars_occ;
        for (size_t j_1__ = 0; j_1__ < sigma_occ_j_1_max__; ++j_1__) {
            sigma_occ(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_occ);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_occ: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("sigma_det")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_det missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_det");
        pos__ = 0U;
        validate_non_negative_index("sigma_det", "n_grpvars_det", n_grpvars_det);
        context__.validate_dims("parameter initialization", "sigma_det", "vector_d", context__.to_vec(n_grpvars_det));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_det(n_grpvars_det);
        size_t sigma_det_j_1_max__ = n_grpvars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            sigma_det(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_det: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("b_occ")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_occ missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_occ");
        pos__ = 0U;
        validate_non_negative_index("b_occ", "sum(nRE_occ)", sum(nRE_occ));
        context__.validate_dims("parameter initialization", "b_occ", "vector_d", context__.to_vec(sum(nRE_occ)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_occ(sum(nRE_occ));
        size_t b_occ_j_1_max__ = sum(nRE_occ);
        for (size_t j_1__ = 0; j_1__ < b_occ_j_1_max__; ++j_1__) {
            b_occ(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_occ);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_occ: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("b_det")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_det missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_det");
        pos__ = 0U;
        validate_non_negative_index("b_det", "sum(nRE_det)", sum(nRE_det));
        context__.validate_dims("parameter initialization", "b_det", "vector_d", context__.to_vec(sum(nRE_det)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_det(sum(nRE_det));
        size_t b_det_j_1_max__ = sum(nRE_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            b_det(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_det);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_det: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 48;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_occ;
            (void) beta_occ;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_occ = in__.vector_constrain(nFP_occ, lp__);
            else
                beta_occ = in__.vector_constrain(nFP_occ);
            current_statement_begin__ = 49;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_det;
            (void) beta_det;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_det = in__.vector_constrain(nFP_det, lp__);
            else
                beta_det = in__.vector_constrain(nFP_det);
            current_statement_begin__ = 50;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_occ;
            (void) sigma_occ;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_occ = in__.vector_lb_constrain(0, n_grpvars_occ, lp__);
            else
                sigma_occ = in__.vector_lb_constrain(0, n_grpvars_occ);
            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_det;
            (void) sigma_det;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_det = in__.vector_lb_constrain(0, n_grpvars_det, lp__);
            else
                sigma_det = in__.vector_lb_constrain(0, n_grpvars_det);
            current_statement_begin__ = 52;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_occ;
            (void) b_occ;  // dummy to suppress unused var warning
            if (jacobian__)
                b_occ = in__.vector_constrain(sum(nRE_occ), lp__);
            else
                b_occ = in__.vector_constrain(sum(nRE_occ));
            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_det;
            (void) b_det;  // dummy to suppress unused var warning
            if (jacobian__)
                b_det = in__.vector_constrain(sum(nRE_det), lp__);
            else
                b_det = in__.vector_constrain(sum(nRE_det));
            // transformed parameters
            current_statement_begin__ = 59;
            validate_non_negative_index("logit_psi", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_psi(M);
            stan::math::initialize(logit_psi, DUMMY_VAR__);
            stan::math::fill(logit_psi, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("logit_p", "(M * J)", (M * J));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_p((M * J));
            stan::math::initialize(logit_p, DUMMY_VAR__);
            stan::math::fill(logit_p, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("log_lik", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_lik(M);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 63;
            stan::math::assign(logit_psi, multiply(X_occ, beta_occ));
            current_statement_begin__ = 64;
            stan::math::assign(logit_p, multiply(X_det, beta_det));
            current_statement_begin__ = 66;
            if (as_bool(occ_has_random)) {
                current_statement_begin__ = 67;
                stan::math::assign(logit_psi, add(logit_psi, multiply(Z_occ, b_occ)));
            }
            current_statement_begin__ = 69;
            if (as_bool(det_has_random)) {
                current_statement_begin__ = 70;
                stan::math::assign(logit_p, add(logit_p, multiply(Z_det, b_det)));
            }
            current_statement_begin__ = 73;
            stan::math::assign(log_lik, get_loglik(y, M, J, logit_psi, logit_p, no_detects, pstream__));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 59;
            size_t logit_psi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_psi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_psi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_psi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 60;
            size_t logit_p_j_1_max__ = (M * J);
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_p(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_p" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 61;
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_lik(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_lik" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_lik: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 79;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,1);
            current_statement_begin__ = 81;
            lp_accum__.add(cauchy_log<propto__>(beta_occ, 0, 2.5));
            current_statement_begin__ = 82;
            lp_accum__.add(cauchy_log<propto__>(beta_det, 0, 2.5));
            current_statement_begin__ = 85;
            if (as_bool(occ_has_random)) {
                current_statement_begin__ = 86;
                for (int i = 1; i <= n_grpvars_occ; ++i) {
                    current_statement_begin__ = 87;
                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(b_occ, stan::model::cons_list(stan::model::index_min_max(idx, ((get_base1(nRE_occ, i, "nRE_occ", 1) + idx) - 1)), stan::model::nil_index_list()), "b_occ"), 0, get_base1(sigma_occ, i, "sigma_occ", 1)));
                    current_statement_begin__ = 88;
                    stan::math::assign(idx, (idx + get_base1(nRE_occ, i, "nRE_occ", 1)));
                }
            }
            current_statement_begin__ = 92;
            stan::math::assign(idx, 1);
            current_statement_begin__ = 93;
            if (as_bool(det_has_random)) {
                current_statement_begin__ = 94;
                for (int i = 1; i <= n_grpvars_det; ++i) {
                    current_statement_begin__ = 95;
                    lp_accum__.add(normal_log<propto__>(stan::model::rvalue(b_det, stan::model::cons_list(stan::model::index_min_max(idx, ((get_base1(nRE_det, i, "nRE_det", 1) + idx) - 1)), stan::model::nil_index_list()), "b_det"), 0, get_base1(sigma_det, i, "sigma_det", 1)));
                    current_statement_begin__ = 96;
                    stan::math::assign(idx, (idx + get_base1(nRE_det, i, "nRE_det", 1)));
                }
            }
            current_statement_begin__ = 100;
            lp_accum__.add(sum(log_lik));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_occ");
        names__.push_back("beta_det");
        names__.push_back("sigma_occ");
        names__.push_back("sigma_det");
        names__.push_back("b_occ");
        names__.push_back("b_det");
        names__.push_back("logit_psi");
        names__.push_back("logit_p");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nFP_occ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nFP_det);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_grpvars_occ);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_grpvars_det);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(nRE_occ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(nRE_det));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((M * J));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_occupancy_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_occ = in__.vector_constrain(nFP_occ);
        size_t beta_occ_j_1_max__ = nFP_occ;
        for (size_t j_1__ = 0; j_1__ < beta_occ_j_1_max__; ++j_1__) {
            vars__.push_back(beta_occ(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_det = in__.vector_constrain(nFP_det);
        size_t beta_det_j_1_max__ = nFP_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            vars__.push_back(beta_det(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_occ = in__.vector_lb_constrain(0, n_grpvars_occ);
        size_t sigma_occ_j_1_max__ = n_grpvars_occ;
        for (size_t j_1__ = 0; j_1__ < sigma_occ_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_occ(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_det = in__.vector_lb_constrain(0, n_grpvars_det);
        size_t sigma_det_j_1_max__ = n_grpvars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_det(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_occ = in__.vector_constrain(sum(nRE_occ));
        size_t b_occ_j_1_max__ = sum(nRE_occ);
        for (size_t j_1__ = 0; j_1__ < b_occ_j_1_max__; ++j_1__) {
            vars__.push_back(b_occ(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_det = in__.vector_constrain(sum(nRE_det));
        size_t b_det_j_1_max__ = sum(nRE_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            vars__.push_back(b_det(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 59;
            validate_non_negative_index("logit_psi", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_psi(M);
            stan::math::initialize(logit_psi, DUMMY_VAR__);
            stan::math::fill(logit_psi, DUMMY_VAR__);
            current_statement_begin__ = 60;
            validate_non_negative_index("logit_p", "(M * J)", (M * J));
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_p((M * J));
            stan::math::initialize(logit_p, DUMMY_VAR__);
            stan::math::fill(logit_p, DUMMY_VAR__);
            current_statement_begin__ = 61;
            validate_non_negative_index("log_lik", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(M);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 63;
            stan::math::assign(logit_psi, multiply(X_occ, beta_occ));
            current_statement_begin__ = 64;
            stan::math::assign(logit_p, multiply(X_det, beta_det));
            current_statement_begin__ = 66;
            if (as_bool(occ_has_random)) {
                current_statement_begin__ = 67;
                stan::math::assign(logit_psi, add(logit_psi, multiply(Z_occ, b_occ)));
            }
            current_statement_begin__ = 69;
            if (as_bool(det_has_random)) {
                current_statement_begin__ = 70;
                stan::math::assign(logit_p, add(logit_p, multiply(Z_det, b_det)));
            }
            current_statement_begin__ = 73;
            stan::math::assign(log_lik, get_loglik(y, M, J, logit_psi, logit_p, no_detects, pstream__));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t logit_psi_j_1_max__ = M;
                for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_psi(j_1__));
                }
                size_t logit_p_j_1_max__ = (M * J);
                for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_p(j_1__));
                }
                size_t log_lik_j_1_max__ = M;
                for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lik(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_occupancy";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_occ_j_1_max__ = nFP_occ;
        for (size_t j_1__ = 0; j_1__ < beta_occ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_occ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_det_j_1_max__ = nFP_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_occ_j_1_max__ = n_grpvars_occ;
        for (size_t j_1__ = 0; j_1__ < sigma_occ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_occ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_det_j_1_max__ = n_grpvars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_occ_j_1_max__ = sum(nRE_occ);
        for (size_t j_1__ = 0; j_1__ < b_occ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_occ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_det_j_1_max__ = sum(nRE_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_psi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_psi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_j_1_max__ = (M * J);
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_occ_j_1_max__ = nFP_occ;
        for (size_t j_1__ = 0; j_1__ < beta_occ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_occ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_det_j_1_max__ = nFP_det;
        for (size_t j_1__ = 0; j_1__ < beta_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_occ_j_1_max__ = n_grpvars_occ;
        for (size_t j_1__ = 0; j_1__ < sigma_occ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_occ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_det_j_1_max__ = n_grpvars_det;
        for (size_t j_1__ = 0; j_1__ < sigma_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_occ_j_1_max__ = sum(nRE_occ);
        for (size_t j_1__ = 0; j_1__ < b_occ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_occ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_det_j_1_max__ = sum(nRE_det);
        for (size_t j_1__ = 0; j_1__ < b_det_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_det" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logit_psi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < logit_psi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_psi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_j_1_max__ = (M * J);
            for (size_t j_1__ = 0; j_1__ < logit_p_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t log_lik_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_occupancy_namespace::model_occupancy stan_model;
#endif
